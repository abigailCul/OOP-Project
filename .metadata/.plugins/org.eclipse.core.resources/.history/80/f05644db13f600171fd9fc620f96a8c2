package ie.gmit.sw;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.LinkedBlockingQueue;

public class Launcher {
	private int k;
	private int[] minhashes; // The random stuff
	private Map<Integer, List<Integer>> map = new HashMap<>();
	private ExecutorService pool;

	public Launcher(String f1, String f2, int shingleSize) throws InterruptedException {
		BlockingQueue<Shingle> q1 = new LinkedBlockingQueue<>();	
		BlockingQueue<Shingle> q2 = new LinkedBlockingQueue<>();	

		
		//Maps
		
			Map <Integer,List<Integer>> m1 = new HashMap<>();
			Map <Integer,List<Integer>> m2 = new HashMap<>();
				
			// threadPoolSize	
			
		Thread t1 = new Thread(new Parser(f1,q1, k),"T1");
		Thread t2 = new Thread(new Parser(f2,q2, k),"T2");
		// t3 for consumer
		
		t1.start();
		t2.start();
		
		t1.join();
		t2.join();
		
		float result = Jaccard(m1.get(0),m2.get(0));
		
		System.out.println("------------------------------------------------------");
		System.out.println("Similarity: "+result+"%");
		System.out.println("------------------------------------------------------");

		
		
	}

//////////Get Jaccard Results
float Jaccard(List<Integer> a,List<Integer> b) {

float result = (float) 0.0;

List<Integer> intersection = new ArrayList<Integer>(a);
intersection.retainAll(b);
result = ((float)intersection.size()/k)*100;

System.out.println("Min Hashes "+ intersection.size());

return result;
}
  }
